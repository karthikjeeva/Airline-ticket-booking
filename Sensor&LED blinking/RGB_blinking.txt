/*  
 *  LoRa 868 / 915MHz SX1272 Module
 *  
 *  Copyright (C) Libelium Comunicaciones Distribuidas S.L. 
 *  http://www.libelium.com 
 *  
 *  This program is free software: you can redistribute it and/or modify 
 *  it under the terms of the GNU General Public License as published by 
 *  the Free Software Foundation, either version 3 of the License, or 
 *  (at your option) any later version. 
 *  
 *  This program is distributed in the hope that it will be useful, 
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of 
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License 
 *  along with this program.  If not, see http://www.gnu.org/licenses/. 
 *  
 *  Version:           1.0
 *  Design:            David Gascón 
 *  Implementation:    Victor Boria & Luis Miguel Marti
 */
 
// Include the SX1272 and SPI library: 
#include "SX1272.h"

#define RED     5
#define GREEN   6
#define BLUE    7

int e;
boolean red_state = false;
boolean green_state = false;
boolean blue_state = false;
char packet[1];

void setup()
{
	
  pinMode(RED,OUTPUT);
  pinMode(GREEN,OUTPUT);
  pinMode(BLUE,OUTPUT);
  digitalWrite(RED,HIGH);
  digitalWrite(GREEN,HIGH);
  digitalWrite(BLUE,HIGH);
  
  // Power ON the module
  sx1272.ON();
   
  // Set transmission mode and print the result
  e = sx1272.setMode(4);
  printf("Setting Mode: state ");
  printf("%d\n",e);
  
  // Select frequency channel
  e = sx1272.setChannel(CH_12_868);
  printf("Setting Channel: state ");
  printf("%d\n",e);
  
  // Select output power (Max, High or Low)
  e = sx1272.setPower('H');
  printf("Setting Power: state ");
  printf("%d\n",e);
  
  // Set the node address and print the result
  e = sx1272.setNodeAddress(2);
  printf("Setting node address: state ");
  printf("%d\n",e);
  
  // Print a success message
  printf("SX1272 successfully configured\n");
}

void loop(void)
{
  // Receive message
  e = sx1272.receivePacketTimeoutACK(5000);  
  if( e == 0 )
  {  
      packet[0] = char(sx1272.packet_received.data[0]);
      printf("%c\n", packet[0]);
    
      if (packet[0]=='R' && !red_state){
        red_state=true;
        digitalWrite(RED,LOW);
        printf("RED ON\n");
       
      }else if((packet[0]=='R') && red_state==true){
        
        red_state=false;
        digitalWrite(RED,HIGH);
        printf("RED OFF\n");
        
      }else if ((packet[0]=='G') && !green_state){
        
        green_state=true;
        digitalWrite(GREEN,LOW);
        printf("GREEN ON\n");
        
      }else if ((packet[0]=='G') && green_state){
        
        green_state=false;
        digitalWrite(GREEN,HIGH);
        printf("GREEN OFF\n");
        
      }else if ((packet[0]=='B') && !blue_state){
        
        blue_state=true;
        digitalWrite(BLUE,LOW);
        printf("BLUE ON\n");
        
      }else if ((packet[0]=='B') && blue_state){
        
        blue_state=false;
        digitalWrite(BLUE,HIGH);
        printf("BLUE OFF\n");
      }
  }
}



int main (){
	setup();
	while(1){
		loop();
	}
	return (0);
}

        